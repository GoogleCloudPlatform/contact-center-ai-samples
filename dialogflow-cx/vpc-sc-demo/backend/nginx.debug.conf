# /etc/nginx/nginx.conf

user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Uncomment to include files with config snippets into the root context.
# NOTE: This will be enabled by default in Alpine 3.15.
#include /etc/nginx/conf.d/*.conf;

events {
        # The maximum number of simultaneous connections that can be opened by
        # a worker process.
        worker_connections 1024;
}

http {
        # Includes mapping of file name extensions to MIME types of responses
        # and defines the default type.
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Name servers used to resolve names of upstream servers into addresses.
        # It's also needed when using tcpsocket and udpsocket in Lua modules.
        #resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

        # Don't tell nginx version to the clients. Default is 'on'.
        server_tokens off;

        # Specifies the maximum accepted body size of a client request, as
        # indicated by the request header Content-Length. If the stated content
        # length is greater than this size, then the client receives the HTTP
        # error code 413. Set to 0 to disable. Default is '1m'.
        client_max_body_size 1m;

        # Sendfile copies data between one FD and other from within the kernel,
        # which is more efficient than read() + write(). Default is off.
        sendfile on;

        # Causes nginx to attempt to send its HTTP response head in one packet,
        # instead of using partial frames. Default is 'off'.
        tcp_nopush on;


        # Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
        # TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

        # Path of the file with Diffie-Hellman parameters for EDH ciphers.
        # TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
        #ssl_dhparam /etc/ssl/nginx/dh2048.pem;

        # Specifies that our cipher suits should be preferred over client ciphers.
        # Default is 'off'.
        ssl_prefer_server_ciphers on;

        # Enables a shared SSL cache with size that can hold around 8000 sessions.
        # Default is 'none'.
        ssl_session_cache shared:SSL:2m;

        # Specifies a time during which a client may reuse the session parameters.
        # Default is '5m'.
        ssl_session_timeout 1h;

        # Disable TLS session tickets (they are insecure). Default is 'on'.
        ssl_session_tickets off;


        # Enable gzipping of responses.
        #gzip on;

        # Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
        gzip_vary on;


        # Helper variable for proxying websockets.
        map $http_upgrade $connection_upgrade {
                default upgrade;
                '' close;
        }


        # Specifies the main log format.
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        # Sets the path, format, and configuration for a buffered log write.
        access_log /var/log/nginx/access.log main;


        # Includes virtual hosts configs.
        include /etc/nginx/http.d/*.conf;

    # TIP: Uncomment if you use stream module.
    #include /etc/nginx/stream.conf;

    server {
        listen       5050;
        server_name  auth-service.localhost;
        location / {
            proxy_pass http://localhost:5051;
        }
    }

    server {
        listen       5050;
        server_name  auth-service.localhost;
        location / {
            proxy_pass http://localhost:5051;
        }
    }

    server {
        listen       8080;
        server_name  user-service.localhost;
        location / {
            proxy_pass http://localhost:8081;
        }
    }

    server {

    	proxy_connect_timeout       900;
        proxy_send_timeout          900;
        proxy_read_timeout          900;
    	send_timeout                900;

        listen       3000;
        server_name  localhost;
        location = /deploy {
            proxy_pass http://localhost:5001/deploy;
        }
        location = /validate_project_id {
            proxy_pass http://localhost:5001/validate_project_id;
        }
        location = /unlock {
            proxy_pass http://localhost:5001/unlock;
        }
        location = /import {
            proxy_pass http://localhost:5001/import;
        }
        location = /asset_status {
            proxy_pass http://localhost:5001/asset_status;
        }
        location = /update_target {
            proxy_pass http://localhost:5001/update_target;
        }
        location = /get_principal {
            proxy_pass http://localhost:5001/get_principal;
        }
        location = /update_webhook_access {
            proxy_pass http://localhost:5001/update_webhook_access;
        }
        location = /service_directory_webhook_fulfillment_status {
            proxy_pass http://localhost:5001/service_directory_webhook_fulfillment_status;
        }
        location = /update_service_directory_webhook_fulfillment {
            proxy_pass http://localhost:5001/update_service_directory_webhook_fulfillment;
        }
        location = /update_security_perimeter_cloudfunctions {
            proxy_pass http://localhost:5001/update_security_perimeter_cloudfunctions;
        }
        location = /update_security_perimeter_dialogflow {
            proxy_pass http://localhost:5001/update_security_perimeter_dialogflow;
        }
        location = /restricted_services_status_cloudfunctions {
            proxy_pass http://localhost:5001/restricted_services_status_cloudfunctions;
        }
        location = /restricted_services_status_dialogflow {
            proxy_pass http://localhost:5001/restricted_services_status_dialogflow;
        }
        location = /webhook_access_allow_unauthenticated_status {
            proxy_pass http://localhost:5001/webhook_access_allow_unauthenticated_status;
        }
        location = /webhook_ingress_internal_only_status {
            proxy_pass http://localhost:5001/webhook_ingress_internal_only_status;
        }
        location = /update_webhook_ingress {
            proxy_pass http://localhost:5001/update_webhook_ingress;
        }
        location = /session {
            proxy_pass http://localhost:5001/session;
        }
        location = /logout {
            proxy_pass http://localhost:5001/logout;
        }
        location = /restricted_services_status {
            proxy_pass http://localhost:5001/restricted_services_status;
        }
        location = /info {
            proxy_pass http://localhost:5001/info;
        }
        location = /dev {
            proxy_pass http://localhost:5001/dev;
        }
        location / {
            proxy_pass http://localhost:3001;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}

